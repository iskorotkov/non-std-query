@page "/results"
@using NonStdQuery.Client.Services
@using NonStdQuery.Backend.Representation.Data
@using NonStdQuery.Backend.Representation.Validation

@inject CurrentSelection CurrentSelection
@inject QueryValidator Validator

@if (Validator.HasErrors(CurrentSelection.Query))
{
    <span>@_validationString</span>
}
else
{
    <button @onclick="@Execute">Execute</button>

    @if (_executionResult != null)
    {
        <table>
            <thead>
                <tr>
                    @foreach (var title in CurrentSelection.Query.SelectAttributes)
                    {
                        <th>@title</th>
                    }
                </tr>
            </thead>

            <tbody>
                @foreach (var row in _executionResult.Data)
                {
                    <tr>
                        @foreach (var field in row)
                        {
                            <td>@field</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }

    <button @onclick="@Explain">Explain</button>

    @if (_explanationResult != null)
    {
        <div class="container">
            <div class="col-lg-6">
                <fieldset class="border">
                    <legend class="text-center">SQL</legend>

                    <p id="innerPara">
                        @_explanationResult.Sql
                    </p>
                </fieldset>
            </div>
        </div>

        <div class="container">
            <div class="col-lg-6">
                <fieldset class="border">
                    <legend class="text-center">Pretty SQL</legend>

                    <p id="innerPara">
                        @_explanationResult.PrettySql
                    </p>
                </fieldset>
            </div>
        </div>
    }
}

@code
{
    private ExecutionResult _executionResult;
    private ExplanationResult _explanationResult;

    private string _validationString = "В запросе присутствуют ошибки.";

    private async Task Execute()
    {
        _executionResult = await CurrentSelection.Execute();
    }

    private async Task Explain()
    {
        _explanationResult = await CurrentSelection.Explain();
    }
}
