@page "/conditions"
@using NonStdQuery.Client.Services
@using NonStdQuery.Backend.Representation.Data
@using NonStdQuery.Backend.Data.Queries
@using NonStdQuery.Backend.Data.Db.Queries

@inject FieldsRegistry FieldsRegistry

@if (FieldsRegistry.Fields != null)
{
    <select @bind="@_selectedFieldIndex">
        @for (var i = 0; i < FieldsRegistry.Fields.Count; i++)
        {
            var field = FieldsRegistry.Fields[i];
            <option value="@i">@field.Name</option>
        }
    </select>

    <select @bind="@_selectedOperation">
        <option value="@Operation.Equal">=</option>
        <option value="@Operation.NotEqual">!=</option>
        <option value="@Operation.Less">&lt;</option>
        <option value="@Operation.More">&gt;</option>
        <option value="@Operation.LessEqual">&le;</option>
        <option value="@Operation.MoreEqual">&ge;</option>
    </select>

    @switch (SelectedField.Type)
    {
        case DbType.Bool:
            <input type="checkbox" @oninput="@(args => ValueChanged(args))"/>
            break;
        case DbType.Numeric:
            <input type="number" @oninput="@(args => ValueChanged(args))"/>
            break;
        case DbType.String:
            <input type="text" @oninput="@(args => ValueChanged(args))"/>
            break;
        case DbType.DateTime:
            <input type="date" @oninput="@(args => ValueChanged(args))"/>
            break;
        default:
            <span>Type isn't supported</span>
            break;
    }

    <select @bind="@_selectedLink">
        <option value="@LinkMethod.None"></option>
        <option value="@LinkMethod.And">and</option>
        <option value="@LinkMethod.Or">or</option>
    </select>
}

@if (_value != null)
{
    <span>@_value</span>
}

@code
{
    private int _selectedFieldIndex;
    private FieldInfo SelectedField => FieldsRegistry.Fields[_selectedFieldIndex];

    private Operation _selectedOperation;

    private LinkMethod _selectedLink;

    private object _value;

    protected override async Task OnInitializedAsync()
    {
        await FieldsRegistry.Fetch();
    }

    private void ValueChanged(ChangeEventArgs args)
    {
        _value = args.Value;
    }
}
